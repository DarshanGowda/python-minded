#!/usr/bin/python
"""
Git hook to catch pdb issues before committing.

How it works?
copy file to '/usr/share/git-core/templates/hooks/' then,
it will automatically copy to .git/hooks whenever new repository is cloned.

"""

__author__ = 'Darshan RK Gowda'

import subprocess
import re
import os
from sys import exit

try:
    from preCommitPdb import check_for_pdb_violations
except Exception as err:
    def check_for_pdb_violations():
        pass

    print "OOPS Your staged files missed PDB check, due to ", err

try:
    from preCommitZopeDateTime import is_zope_datetime_used
except Exception as err:
    def is_zope_datetime_used():
        pass

    print "OOPS Your staged files missed ZopeDateTime check, due to ", err

# try:
#     from preCommitJvar import is_select_need_tobe_jvar
# except Exception as err:
#     def is_select_need_tobe_jvar():
#         pass
#     print "OOPS Your staged files missed jvar check on select, due to ", err

try:
    from preCommitJsHint import scan_for_jshint_errors
except Exception as err:
    def scan_for_jshint_errors():
        pass
    print "OOPS Your staged files missed jshint check on js, due to ", err


EXCLUDE_PATTERNS = "import\s+\*"
TOOLS = ['pep8', 'pyflakes']


def get_staged_files(file_type):
    """
    get all staged files for next commit
    """
    regex_pattern = r'^([AM]|MM)\s+(.*\.py)' if file_type == "py" else r'^([AM]|MM)\s+(.*\.js)'
    proc = subprocess.Popen(('git', 'status', '--porcelain'), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, _ = proc.communicate()
    staged_files = [matched_group[1] for matched_group in re.findall(regex_pattern, out, re.MULTILINE)]
    return staged_files


def validate_with_analysis_tools():
    """
    validates staged file with analysis tool and
    generates report
    """
    staged_files = get_staged_files('py')
    issue_dict = {}
    check_for_pdb_violations(staged_files)  # checks for pdb violations if any stop from committing

    for each_tool in TOOLS:
        violations_report = ""
        for each_staged_files in staged_files:
            proc2 = subprocess.Popen([each_tool, os.path.abspath(each_staged_files)], stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE)
            violations_report += proc2.stderr.read()
            violations_report += proc2.communicate()[0]
        issue_dict.setdefault(each_tool, []).extend(
            [issue for issue in violations_report.splitlines() if not re.findall(EXCLUDE_PATTERNS, issue)])
    if any(issue_dict.values()):
        print '\033[95m' + "***** Commit failed due to below pyflakes / pep8 errors *****\n" + '\033[0m'
        for k, v in issue_dict.iteritems():
            print '\033[94m' + "############ %s ################" % k + '\033[0m'
            print "\n".join(v)
        exit(1)

    is_zope_datetime_used(staged_files)  # checks for zope DateTime imports if any print report

    # is_select_need_tobe_jvar(staged_files) # checks for select statement in html and prints in console
    staged_files = get_staged_files('js')
    scan_for_jshint_errors(staged_files) # generates jshint errors

if __name__ == '__main__':
    validate_with_analysis_tools()